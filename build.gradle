import groovy.json.JsonOutput
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        gradlePluginPortal()
        maven {
            name 'MinecraftForge'
            url 'https://maven.minecraftforge.net/'
        }
        maven {
            name 'Garden of Fancy'
            url 'https://maven.gofancy.wtf/releases'
        }
        //fallback for fancygradle maven
        //mavenLocal()
        maven {
            name 'Sponge'
            url 'https://repo.spongepowered.org/repository/maven-public/'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.+'
        classpath 'org.ajoberstar.grgit:grgit-gradle:3.1.1'
        classpath group: 'wtf.gofancy.fancygradle', name: 'wtf.gofancy.fancygradle.gradle.plugin', version: '1.1.+'
    }

    repositories.each {
        if (it instanceof MavenArtifactRepository && it.url.toString() == "https://files.minecraftforge.net/maven") {
            it.url = "https://maven.minecraftforge.net"
        }
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: org.ajoberstar.grgit.gradle.GrgitPlugin
apply plugin: 'wtf.gofancy.fancygradle'

//// Project Settings ////
// http://maven.apache.org/guides/mini/guide-naming-conventions.html

group = "${project.maven_group}" // groupId
archivesBaseName = "${project.jar_name}" // artifactId - modid
version = "${project.mc_version}-${project.mod_version}"

//// Project Settings ////

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: project.mappings_channel, version: "${project.mappings_version}-${project.mappings_mc_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
        }
    }
}

repositories {
    google()
    mavenCentral()
    maven {
        url = uri('https://www.cursemaven.com')
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name = 'Modrinth'
        url = uri('https://api.modrinth.com/maven')
        content {
            includeGroup 'maven.modrinth'
        }
    }
    maven {
        name = 'Sponge'
        url = uri('https://repo.spongepowered.org/maven')
    }
    maven {
        url = uri('https://maven.blamejared.com')
    }
    maven {
        url = uri('https://m2.dv8tion.net/releases')
    }
    maven {
        url = uri('https://jitpack.io')
    }
    flatDir {
        dirs 'build/libs'
    }
}

dependencies {
    //// MC version ////
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"
    //// MC version ////

    // CurseForge Maven
    // Currently unused
    // CurseForge Maven usage: https://support.curseforge.com/en/support/solutions/articles/9000197321-curseforge-api
    // Format: compile '{projectSlug}:{mavenArtifact}:{mavenVersion}:{projectFileNameTag}'

    // CurseMaven - https://www.cursemaven.com/
    // Format: curse.maven:<descriptor>-<projectid>:<fileid>
    // Fields:
    // curse.maven -> Required. Marks the dependency to be resolved by the curse maven website.
    // <descriptor> -> Can be anything you want. This file downloaded will have this in it's name, so it's good to use this to show which files are what. A good practice would be to have this as the project slug.
    // <projectid> -> The project id of the file you want to add as a dependency.
    // <fileid> -> The file id of the file you want to add as a dependency.
    // Test link: https://www.cursemaven.com/test/<projectid>/<fileid>/<Classifier?>

    //// Dependencies ////

    implementation fg.deobf("curse.maven:ElectroblobsWizardry-${wizardry_projectid}:${wizardry_fileid}")
    implementation fg.deobf("curse.maven:baubles-${baubles_projectid}:${baubles_fileid}")
    implementation fg.deobf("curse.maven:WizardryUtils-${wizardryutils_projectid}:${wizardryutils_fileid}")
    //// Dependencies ////
}

//// Project manifest data ////

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Maven-Artifact": "${project.maven_group}:${project.archivesBaseName}:${project.version}",
                "Specification-Title": archivesBaseName,
                "Specification-Vendor": "${project.author}",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"${project.author}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                "Built-On": "${project.mc_version}-${project.forge_version}"
        ])
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    description = 'Creates a JAR containing the source code.'
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest {
        attributes([
                "Maven-Artifact": "${project.maven_group}:${project.archivesBaseName}:${project.version}",
                "Specification-Title": archivesBaseName,
                "Specification-Vendor": "${project.author}",
                "Specification-Version": "1",
                "Implementation-Title": archivesBaseName + '-sources',
                "Implementation-Version": "${project.mod_version}",
                "Implementation-Vendor": "${project.author}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                "Built-On": "${project.mc_version}-${project.forge_version}"
        ])
    }
}

//// Project manifest data ////

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

processResources {
    if (System.getenv('PROJECT_VERSION') != null) {
        version = "${project.mc_version}-" + System.getenv('PROJECT_VERSION')
        project.mod_version = System.getenv('PROJECT_VERSION')
    }
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", version.toString()
    inputs.property "mcversion", project.mc_version.toString()

    // Get the CREDITS.md and put it into the mcmod.info credits as json
    File file = new File("$projectDir/CREDITS.md")
    String fileContent = file.getText("UTF-8")
    def credits = JsonOutput.toJson(fileContent).replaceAll('\\\\r', "")
    // remove opening and closing double quotes
    credits = credits.getAt(1..credits.length() - 2)

    // replace tokens in mcmod.info, and pack.mcmeta
    from(sourceSets.main.resources.srcDirs) {
        include 'pack.mcmeta'
        include 'mcmod.info'
        // replace tokens in mcmod.info
        expand 'version': version.toString(),
                'mcversion': project.mc_version.toString(),
                'modid': project.mod_id,
                'name': project.name,
                'description': project.description,
                'url': project.url,
                "credits" : credits
    }

    duplicatesStrategy = 'include'
}

task replaceTokens(type: Sync) {
    if (System.getenv('PROJECT_VERSION') != null) {
        version = "${project.mc_version}-" + System.getenv('PROJECT_VERSION')
        project.mod_version = System.getenv('PROJECT_VERSION')
    }

    // replace @TOKENS@ in main file
    from sourceSets.main.java
    inputs.property 'version', project.mc_version.toString()
    filter(ReplaceTokens, tokens: [VERSION: version.toString()])
    filter(ReplaceTokens, tokens: [MCVERSION: "${project.mc_version}".toString()])
    filter(ReplaceTokens, tokens: [WIZARDRY_VERSION: "${project.wizardry_version}".toString()])
    filter(ReplaceTokens, tokens: [WIZARDRY_UTILS_VERSION: "${project.wizardry_utils_version}".toString()])
    into "$buildDir/src"
}

compileJava {
    source = replaceTokens.outputs
}

fancyGradle {
    patches {
        resources
        coremods
        asm
    }
}
